#!/usr/bin/env python
"""
Copies input files into a single output file while converting the csv dialect.

Usage: gristle_file_converter [options]

    Help Options:
        -h, --help        Show this help message and exit
        --long-help       Print more verbose help
        -V, --version     Show version number then exit
        --verbosity=VERBOSITY
                          Controls level of logging.  Valid values include:
                          quiet, normal, high, debug.
    Main Options:
        -i, --infiles [INFILES [INFILES ...]]
                          Input filenames or default to for stdin
        -o, --outfile OUTFILE
                          Output filename or '-' for stdout (the default)

    Input Format Options:
        -d, --delimiter=DELIMITER
                          Single-character csv delimiter
        -q, --quoting=QUOTING
                          Specify quoting behavior.  Useful when automatic csv
                          dialect detection fails or when processing data via
                          stdin.  Valid values are quote_all, quote_minimal,
                          quote_nonnumeric, quote_none.
        --quotechar=QUOTECHAR
                          CSV quotechar - defaults to "
        --doublequote     Quotes within quoted strings are escaped with double
                          quotes.
        --escapechar=ESCAPECHAR
                          Quotes are escaped with the provided escapechar
        --has-header      Indictes there is a header in the file

    Output Formatting Options:
        -D, --out-delimiter=DELIMITER
                          Output csv delimiter, defaults to input delimiter
        -Q, --out-quoting=QUOTING
                          Output csv quoting, defaults to input quoting
        --out-quotechar=QUOTECHAR
                          Output csv quoting character, defaults to input
                          quotechar
        --out-doublequote
                          Output csv escaping through doublequotes, defaults
                          to input doublequote
        --out-escapechar=ESCAPECHAR
                          Output csv escape character, defaults to input
                          escapechar
        --out-has-header  Output header - indicates header exists, defaults
                          to input has-header

    Example Usage:
        $ gristle_file_converter.py --infiles colors.csv  -o /tmp/colors.out \
             --delimiter ','  --quoting quote_none  \
             --out-delimiter '|' --out-quoting quote_all --out_escapechar '\'

    This source code is protected by the BSD license.  See the file "LICENSE"
    in the source code root directory for the full language or refer to it here:
        http://opensource.org/licenses/BSD-3-Clause
    Copyright 2011-2021 Ken Farmer
"""

import errno
from pprint import pprint as pp
from os.path import basename
from signal import signal, SIGPIPE, SIG_DFL
import sys
from typing import Dict, List, Any, Optional, Union

import datagristle.common              as comm
import datagristle.configulator        as configulator
import datagristle.csvhelper           as csvhelper
import datagristle.file_io             as file_io

#Ignore SIG_PIPE and don't throw exceptions on it... (http://docs.python.org/library/signal.html)
signal(SIGPIPE, SIG_DFL)

NAME = basename(__file__)
SHORT_HELP = '''Converts a file's csv dialect - field delimiter, quoting, etc.'''



def main():
    """ Analyzes the file to automatically determine input file csv
        characteristics.  Then reads one record at a time and writes it
        out.

    """
    try:
        config_manager = ConfigManager()
        nconfig = config_manager.get_config()
    except EOFError:
        sys.exit(errno.ENODATA) # 61: empty file

    input_handler = file_io.InputHandler(nconfig.infiles,
                                         nconfig.dialect)

    output_handler = file_io.OutputHandler(nconfig.outfile,
                                           nconfig.out_dialect)

    for rec in input_handler:
        if input_handler.curr_file_rec_cnt == 1:
            if (nconfig.dialect.has_header and not nconfig.out_dialect.has_header):
                continue  # skip input header if output has-no-header
            elif input_handler.files_read > 1:
                continue  # skip input header on any files besides the first

        output_handler.write_rec(rec)

    input_handler.close()
    output_handler.close()

    return 0





class ConfigManager(configulator.Config):

    def __init__(self):
        self.config = None
        super().__init__(NAME, SHORT_HELP, __doc__)

    def get_config(self) -> Dict[str, Any]:
        self.define_user_config()
        self.process_configs()
        self.extend_config()
        if self.nconfig.verbosity == 'debug':
            self.print_config()
        return self.nconfig


    def define_user_config(self) -> None:
        """ Defines the user config or metadata.

        Does not get the user input.
        """
        self.add_standard_metadata('infiles')
        self.add_standard_metadata('outfile')

        self.add_all_csv_configs()

        self.add_custom_metadata(name='out_delimiter',
                                 short_name='D',
                                 arg_type='option',
                                 type=str,
                                 help='Specifies the output file delimiter')
        self.add_custom_metadata(name='out_quoting',
                                 short_name='Q',
                                 arg_type='option',
                                 type=str,
                                 choices=['quote_none', 'quote_all', 'quote_minimal', 'quote_nonnumeric'],
                                 help='Specify quoting for output, valid values are: quote_none, quote_all, quote_minimal, quote_nonnumeric')
        self.add_custom_metadata(name='out_quotechar',
                                 arg_type='option',
                                 type=str,
                                 help='Specifies the output quoting character.')
        self.add_custom_metadata(name='out_has_header',
                                 short_name='H',
                                 arg_type='option',
                                 type=bool,
                                 action='store_const',
                                 const=True,
                                 help='Specifies there is a header in output file.')
        self.add_custom_metadata(name='out_escapechar',
                                 short_name='E',
                                 arg_type='option',
                                 type=str,
                                 help='Causes quoting to be escaped with an escapechar')
        self.add_custom_metadata(name='out_doublequote',
                                 arg_type='option',
                                 type=bool,
                                 action='store_const',
                                 const=True,
                                 help='Causes quoting to be escaped with doublequotes')

        self.add_standard_metadata('verbosity')
        self.add_all_config_configs()



    def extend_config(self) -> None:
        """ Add derrived attributes to our config so they're all in one place.
        """
        self.generate_csv_dialect_config()

        out_dialect = csvhelper.get_dialect('-',
                                            self.config['out_delimiter']   or self.nconfig.dialect.delimiter,
                                            self.config['out_quoting']
                                                or csvhelper.get_quote_name(self.nconfig.dialect.quoting),
                                            self.config['out_quotechar']   or self.nconfig.dialect.quotechar,
                                            self.config['out_has_header']  or self.nconfig.dialect.has_header,
                                            self.config['out_doublequote'] or self.nconfig.dialect.doublequote,
                                            self.config['out_escapechar']  or self.nconfig.dialect.escapechar)

        self.update_config('out_dialect', out_dialect)



if __name__ == '__main__':
    sys.exit(main())
