#!/usr/bin/env python
"""
"""
import argparse
import errno
from os.path import basename
from pprint import pprint as pp
from signal import signal, SIGPIPE, SIG_DFL
import sys
from typing import Dict, List, Any, Optional, Union


import datagristle.configulator as configulator
import datagristle.csvhelper as csvhelper
import datagristle.file_sorter as file_sorter

#--- Ignore SIG_PIPE and don't throw exceptions on it
#--- (http://docs.python.org/library/signal.html)
signal(SIGPIPE, SIG_DFL)

NAME = basename(__file__)
SHORT_HELP = 'sort a csv file with strict csv dialect handling\n'



def main() -> int:
    """
    """
    try:
        config_manager = ConfigManager()
        named_config = config_manager.get_config()
    except EOFError:
        sys.exit(errno.ENODATA) # 61: empty file

    sorter = file_sorter.CSVPythonSorter(named_config.infiles[0],
                                         named_config.outfile,
                                         named_config.sort_keys,
                                         named_config.dialect,
                                         named_config.dedupe)

    sorter.sort_file()
    sorter.close()



class ConfigManager(configulator.Config):


    def __init__(self):
        self.config = None
        super().__init__(NAME, SHORT_HELP, __doc__)


    def get_config(self) -> Dict[str, Any]:
        self.define_user_config()
        self.process_configs()
        self.extend_config()
        return self.named_config


    def define_user_config(self) -> None:
        """ Defines the user config or metadata.

        Does not get the user input.
        """
        self.add_standard_config('infiles')
        self.add_standard_config('outfile')
        self.add_all_csv_configs()

        self.add_custom_config(name='dedupe',
                               short_name='D',
                               arg_type='option',
                               action='store_const',
                               const=True,
                               default=False,
                               config_type=bool,
                               help_msg='Directs program to remove duplicates - based on the key provided. '
                                        'Note that this will treat 0 and 0.0 the same if the keys are specified '
                                        'as numeric. '
                                        'However, case differences will not be ignored.')
        self.add_custom_config(name='keys',
                               short_name='k',
                               arg_type='option',
                               config_type=bool,
                               required=True,
                               nargs='+',
                               help_msg='Specifies the key configuration. Each key specified consists of three values: '
                                        '1) position (0-offset), 2) type (s=string, i=integer, f=float), '
                                        '3) order (f=forward, r=reverse). '
                                        'All 3 values are required for each key.  Multiple keys can be specified by '
                                        'separating groups of 3 with a comma or including all within quotes and '
                                        'separating the groups with a space.')


    def validate_custom_config(self,
                               custom_config: configulator.CONFIG_TYPE) -> None:
        """ Validate the application's config and modify as necessary
        """

        if custom_config['infiles'] == '-':  # stdin
            if not custom_config['delimiter']:
                self.parser.error('Please provide delimiter when piping data into program via stdin')
            if not custom_config['quoting']:
                custom_config['quoting'] = 'quote_minimal'


    def extend_config(self) -> None:
        """ Add derrived attributes to our config so they're all in one place.
        """
        self.generate_csv_dialect_config()
        self.update_config('sort_keys', file_sorter.SortKeysConfig(self.named_config.keys))



if __name__ == '__main__':
    sys.exit(main())
