#!/usr/bin/env python
"""
Gristle_sorter is a csv dialect-aware file sorting utility.  Unlike the unix sort utility, it will properly handle a csv file using doublequotes or escape characters to prevent quotes or delimiters from being misinterpreted.

Usage: gristle_sorter --long-help for detailed usage and help

    Help Options:
        -h, --help            show brief help message and exit
        --long-help           show this verbose help and exit
        -V, --version         show version info and exit

    Main Options:
        -i [INFILES [INFILES ...]], --infiles [INFILES [INFILES ...]]
                              input filenames or default to for stdin
        -o OUTFILE, --outfile OUTFILE
                              output filename or '-' for stdout (the default)
        -k KEYS [KEYS ...], --keys KEYS [KEYS ...]
                              Specifies the key configuration. Each key specified
                              consists of three values:
                                  1) position (0-offset),
                                  2) type (s=string, i=integer, f=float),
                                  3) order (f=forward, r=reverse).
                              All 3 values are required for each key. Multiple
                              keys can be specified by separating groups of 3
                              with a comma or including all within quotes and
                              separating the groups with a space.
        -D, --dedupe          Directs program to remove duplicates - based on
                              the key provided. Note that this will treat 0 and
                              0.0 the same if the keys are specified as numeric.
                              However, case differences will not be ignored.

    CSV Dialect Options:
      -d, --delimiter=<del>  Provide a quoted single-character field delimiter.
                             Useful if automatic csv dialect detection fails to
                             correctly interpret file. Also required for STDIN
                             input.  If provided then quoting should also be
                             provided.
      -q, --quoting=<qt>     Specify quoting behavior.  Useful used when
                             automatic csv dialect detection fails or when
                             processing data via stdin.  Valid values include:
                             quote_none, quote_minimal, quote_nonnumeric,
                             quote_all
      --quotechar=QUOTECHAR
      --escapechar=ESCAPECHAR
      --has-header           Indicates there is a header in the file.
      --has-no-header        Indicates there is no header in the file.  Useful
                             for overriding automatic csv-guessing behavior.

Examples:
    $ gristle_sorter -i foo.csv -o foo_sorted.csv -k '3sf,1ir,2ir'

	$ gristle_sorter -i foo.csv -o foo_sorted.csv -k '3sf,1ir,2ir' -d '|' --quotechar

    $ gristle_sorter -i dialect_quoteall_escaped_delimiter.csv -k 0sf -d ',' --quoting quote_all --escapechar '\' --has-header
    "num","alpha","alphanumeric"
    "1","bbb","a23,bar"
    "2","ccc","b23,baz"
    "3","aaa","b23,foo"
    "4","ddd","a23,meh"

"""
import argparse
import errno
from os.path import basename
from pprint import pprint as pp
from signal import signal, SIGPIPE, SIG_DFL
import sys
from typing import Dict, List, Any, Optional, Union


import datagristle.common as comm
import datagristle.configulator as configulator
import datagristle.csvhelper as csvhelper
import datagristle.file_sorter as file_sorter

#--- Ignore SIG_PIPE and don't throw exceptions on it
#--- (http://docs.python.org/library/signal.html)
signal(SIGPIPE, SIG_DFL)

NAME = basename(__file__)
SHORT_HELP = 'sort a csv file with strict csv dialect handling\n'



def main() -> int:
    """
    """
    try:
        config_manager = ConfigManager()
        nconfig = config_manager.get_config()
    except EOFError:
        sys.exit(errno.ENODATA) # 61: empty file

    sorter = file_sorter.CSVPythonSorter(nconfig.infiles[0],
                                         nconfig.outfile,
                                         nconfig.sort_keys,
                                         nconfig.dialect,
                                         nconfig.dedupe)

    sorter.sort_file()
    sorter.close()



class ConfigManager(configulator.Config):


    def __init__(self):
        self.config = None
        super().__init__(NAME, SHORT_HELP, __doc__)


    def get_config(self) -> Dict[str, Any]:
        self.define_user_config()
        self.process_configs()
        self.extend_config()
        return self.nconfig


    def define_user_config(self) -> None:
        """ Defines the user config or metadata.

        Does not get the user input.
        """
        self.add_standard_metadata('infiles')
        self.add_standard_metadata('outfile')

        self.add_custom_metadata(name='keys',
                                 short_name='k',
                                 arg_type='option',
                                 config_type=str,
                                 required=True,
                                 nargs='+',
                                 help_msg='Specifies the key configuration. Each key specified consists of three values: '
                                          '1) position (0-offset), 2) type (s=string, i=integer, f=float), '
                                          '3) order (f=forward, r=reverse). '
                                          'All 3 values are required for each key.  Multiple keys can be specified by '
                                          'separating groups of 3 with a comma or including all within quotes and '
                                          'separating the groups with a space.')

        self.add_custom_metadata(name='dedupe',
                                 short_name='D',
                                 arg_type='option',
                                 action='store_const',
                                 const=True,
                                 default=False,
                                 config_type=bool,
                                 help_msg='Directs program to remove duplicates - based on the key provided. '
                                          'Note that this will treat 0 and 0.0 the same if the keys are specified '
                                          'as numeric. '
                                          'However, case differences will not be ignored.')
        self.add_all_csv_configs()


    def validate_custom_config(self,
                               custom_config: configulator.CONFIG_TYPE) -> None:
        """ Validate the application's config and modify as necessary
        """

        if custom_config['infiles'][0] == '-':  # stdin
            if not custom_config['delimiter']:
                comm.abort('Please provide delimiter when piping data into program via stdin')
            if not custom_config['quoting']:
                custom_config['quoting'] = 'quote_minimal'


    def extend_config(self) -> None:
        """ Add derrived attributes to our config so they're all in one place.
        """
        self.generate_csv_dialect_config()
        self.update_config('sort_keys', file_sorter.SortKeysConfig(self.nconfig.keys))



if __name__ == '__main__':
    sys.exit(main())
